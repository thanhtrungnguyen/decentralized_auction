{
  "language": "Solidity",
  "sources": {
    "contracts/Auction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nerror Auction__InvalidRegistrationTime();\nerror Auction__InvalidAuctionTime();\nerror Auction__InvalidDuePaymentTime();\nerror Auction__InvalidStartAuctionTime();\nerror Auction__InvalidRegistrationFee();\nerror Auction__InvalidDepositAmount();\nerror Auction__InvalidStartBid();\nerror Auction__InvalidPriceStep();\nerror Auction__InvalidDatetime();\nerror Auction__InvalidAuctionId();\nerror Auction__OutOfRegistrationTime();\nerror Auction__RequireAmountToRegisterNotMet(uint256 auctionId, uint256 requireAmountToRegister);\nerror Auction__OutOfAuctionTime();\n\ncontract Auction {\n    uint256[] private s_listAuction;\n\n    struct AuctionInfo {\n        uint256 startRegistrationTime;\n        uint256 endRegistrationTime;\n        uint256 startAuctionTime;\n        uint256 endAuctionTime;\n        uint256 duePaymentTime;\n        uint256 registrationFee;\n        uint256 depositAmount;\n        uint256 startBid;\n        uint256 priceStep;\n        address highestBidder;\n        uint256 highestBid;\n        address[] listBidders;\n    }\n\n    event AddedAuction(\n        uint256 startRegistrationTime,\n        uint256 endRegistrationTime,\n        uint256 startAuctionTime,\n        uint256 endAuctionTime,\n        uint256 duePaymentTime,\n        uint256 registrationFee,\n        uint256 depositAmount,\n        uint256 startBid,\n        uint256 priceStep\n    );\n\n    mapping(uint256 => AuctionInfo) public s_auctions;\n\n    modifier isVailidAuctionId(uint256 auctionId) {\n        for (uint256 i = 0; i < s_listAuction.length; i++) {\n            if (auctionId == i) {\n                revert Auction__InvalidAuctionId();\n            }\n        }\n        _;\n    }\n\n    modifier isValidRegistrationTime(uint256 startRegistrationTime, uint256 endRegistrationTime) {\n        if (\n            startRegistrationTime < block.timestamp ||\n            // block.timestamp > endRegistrationTime ||\n            startRegistrationTime >= endRegistrationTime\n        ) {\n            revert Auction__InvalidRegistrationTime();\n        }\n        _;\n    }\n\n    modifier isValidStartAuctionTime(uint256 endRegistrationTime, uint256 startAuctionTime) {\n        if (endRegistrationTime >= startAuctionTime) {\n            revert Auction__InvalidStartAuctionTime();\n        }\n        _;\n    }\n\n    modifier isValidAuctionTime(uint256 startAuctionTime, uint256 endAuctionTime) {\n        if (startAuctionTime >= endAuctionTime) {\n            revert Auction__InvalidAuctionTime();\n        }\n        _;\n    }\n\n    modifier isValidDuePaymentTime(uint256 endAuctionTime, uint256 duePaymentTime) {\n        if (endAuctionTime >= duePaymentTime) {\n            revert Auction__InvalidDuePaymentTime();\n        }\n        _;\n    }\n\n    modifier isValidRegistrationFee(uint256 registrationFee) {\n        if (registrationFee <= 0) {\n            revert Auction__InvalidRegistrationFee();\n        }\n        _;\n    }\n\n    modifier isValidDepositAmount(uint256 depositAmount) {\n        if (depositAmount <= 0) {\n            revert Auction__InvalidDepositAmount();\n        }\n        _;\n    }\n\n    modifier isValidStartBid(uint256 depositAmount) {\n        if (depositAmount <= 0) {\n            revert Auction__InvalidStartBid();\n        }\n        _;\n    }\n\n    modifier isValidPriceStep(uint256 depositAmount) {\n        if (depositAmount <= 0) {\n            revert Auction__InvalidPriceStep();\n        }\n        _;\n    }\n\n    modifier isAuctionExist(uint256 auctionId) {\n        uint256 count;\n        for (uint256 i = 0; i < s_listAuction.length; i++) {\n            count++;\n        }\n        if (count == s_listAuction.length) {\n            revert Auction__InvalidAuctionId();\n        }\n        _;\n    }\n\n    function isValidatedInput(\n        uint256 auctionId, //need validate\n        uint256 startRegistrationTime,\n        uint256 endRegistrationTime,\n        uint256 startAuctionTime,\n        uint256 endAuctionTime,\n        uint256 duePaymentTime,\n        uint256 registrationFee,\n        uint256 depositAmount,\n        uint256 startBid,\n        uint256 priceStep\n    )\n        internal\n        view\n        isVailidAuctionId(auctionId)\n        isValidRegistrationTime(startRegistrationTime, endRegistrationTime)\n        isValidStartAuctionTime(endRegistrationTime, startAuctionTime)\n        isValidAuctionTime(startAuctionTime, endAuctionTime)\n        isValidDuePaymentTime(endAuctionTime, duePaymentTime)\n        isValidRegistrationFee(registrationFee)\n        isValidDepositAmount(depositAmount)\n        isValidStartBid(startBid)\n        isValidPriceStep(priceStep)\n        returns (bool)\n    {\n        return true;\n    }\n\n    function createAuction(\n        uint256 auctionId, //need validate\n        uint256 startRegistrationTime,\n        uint256 endRegistrationTime,\n        uint256 startAuctionTime,\n        uint256 endAuctionTime,\n        uint256 duePaymentTime,\n        uint256 registrationFee,\n        uint256 depositAmount,\n        uint256 startBid,\n        uint256 priceStep\n    ) external {\n        if (\n            isValidatedInput(\n                auctionId,\n                startRegistrationTime,\n                endRegistrationTime,\n                startAuctionTime,\n                endAuctionTime,\n                duePaymentTime,\n                registrationFee,\n                depositAmount,\n                startBid,\n                priceStep\n            )\n        ) {\n            AuctionInfo memory auction;\n            auction.startRegistrationTime = startRegistrationTime;\n            auction.endRegistrationTime = endRegistrationTime;\n            auction.startAuctionTime = startAuctionTime;\n            auction.endAuctionTime = endAuctionTime;\n            auction.duePaymentTime = duePaymentTime;\n            auction.registrationFee = registrationFee;\n            auction.depositAmount = depositAmount;\n            auction.startBid = startBid;\n            auction.priceStep = priceStep;\n            // auction.highestBidder = address(0);\n            // auction.highestBid = 0;\n            s_auctions[auctionId] = auction;\n            s_listAuction.push(auctionId);\n            emit AddedAuction(\n                startRegistrationTime,\n                endRegistrationTime,\n                startAuctionTime,\n                endAuctionTime,\n                duePaymentTime,\n                registrationFee,\n                depositAmount,\n                startBid,\n                priceStep\n            );\n        }\n    }\n\n    modifier isRegistrationTime(uint256 auctionId) {\n        if (\n            s_auctions[auctionId].startRegistrationTime < block.timestamp ||\n            s_auctions[auctionId].endRegistrationTime > block.timestamp\n        ) {\n            revert Auction__OutOfRegistrationTime();\n        }\n        _;\n    }\n\n    function registerToBid(uint256 auctionId)\n        external\n        payable\n        isVailidAuctionId(auctionId)\n        isRegistrationTime(auctionId)\n    {\n        uint256 requireAmountToRegister = s_auctions[auctionId].registrationFee +\n            s_auctions[auctionId].depositAmount;\n        if (msg.value < requireAmountToRegister) {\n            revert Auction__RequireAmountToRegisterNotMet(auctionId, requireAmountToRegister);\n        }\n        s_auctions[auctionId].listBidders.push(msg.sender);\n    }\n\n    modifier isAuctionTime(uint256 auctionId) {\n        if (\n            s_auctions[auctionId].startAuctionTime < block.timestamp ||\n            s_auctions[auctionId].endAuctionTime > block.timestamp\n        ) {\n            revert Auction__OutOfAuctionTime();\n        }\n        _;\n    }\n\n    function placeBid(uint256 auctionId)\n        external\n        payable\n        isAuctionExist(auctionId)\n        isAuctionTime(auctionId)\n    {\n        if (msg.value > s_auctions[auctionId].highestBid) {\n            s_auctions[auctionId].highestBid = msg.value;\n            s_auctions[auctionId].highestBidder = msg.sender;\n        }\n    }\n\n    function getAuction(uint256 auctionId) external view returns (AuctionInfo memory) {\n        return s_auctions[auctionId];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}